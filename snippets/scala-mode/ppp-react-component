# -*- mode: snippet -*-
# name: ppp-react-component
# key: ppp-react-component
# --
package schaake.sba.ppp.client.$1

import japgolly.scalajs.react._
import japgolly.scalajs.react.vdom.html_<^._
import schaake.sba.ppp.client.ClientDsl._

object `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))` {
  object Style extends PPPBaseStyle {
    import dsl._

    val main = style(padding(1.em))
  }

  final case class Props(${2:ctx: Context})
  sealed trait State
  object Loading extends State
  final case class Loaded($3) extends State

  class Backend($: BackendScope[Props, State]) {
    def onPropsChange(p: Props, prev: Option[Props]) = if (Some(p) == prev) Callback.empty else Callback.empty
    val init = $.props >>= (p => onPropsChange(p, None))
    val deinit = Callback.empty
    
    def render(p: Props, s: State) = s match {
      case Loading => <.div(icons.loadingSmall, " Loading...")
      case l: Loaded => <.div(p.toString, s.toString)
    }
  }

  private val component = ScalaComponent.builder[Props]("`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`")
    .initialState(Loading.asInstanceOf[State])
    .renderBackend[Backend]
    .componentDidMount(_.backend.init)
    .componentWillUnmount(_.backend.deinit)
    .componentDidUpdate(i => i.backend.onPropsChange(i.currentProps, Some(i.prevProps)))
    .build

  def apply($2) = component(Props(${4:$2}))
}